# -*- coding: utf-8 -*-
"""Art_initiatives_visulasiation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1CHzC2_fwbMXqViOyINMPO2-tkjd4CHSM
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# Load the Data
df = pd.read_csv('projects.csv')

# Handle Incomplete Dates
def parse_date(date_str):
    for fmt in ('%Y-%m-%d', '%Y-%m', '%Y'):
        try:
            return pd.to_datetime(date_str, format=fmt, errors='coerce')
        except ValueError:
            continue
    return pd.NaT

# Apply the parsing function
df['start_date'] = df['from_date'].apply(parse_date)

# Drop rows with missing dates
df = df.dropna(subset=['start_date'])

# Ensure we're working with a fresh copy
df = df.copy()

# Feature Engineering
df['year'] = df['start_date'].dt.year

# Aggregate data by year
annual_counts = df.groupby('year').size().reset_index(name='count')

# Create a time series
annual_counts.set_index('year', inplace=True)
ts_data = annual_counts['count']

# Filter Data Up to 2017
ts_data = ts_data[ts_data.index <= 2017]

# Enhanced Visualization with Seaborn
plt.figure(figsize=(14, 7))
sns.set(style="whitegrid")  # Set the background style
palette = sns.color_palette("crest", n_colors=1)  # Set a custom color palette

sns.lineplot(x=ts_data.index, y=ts_data, label='Historical Data', marker='o', color=palette[0], linewidth=2)

# Customize plot appearance
plt.xlabel('Year', fontsize=14, fontweight='bold')
plt.ylabel('Number of Initiatives', fontsize=14, fontweight='bold')
plt.title('Swiss Art Initiatives', fontsize=16, fontweight='bold')
plt.legend(fontsize=12)
plt.grid(True, linestyle='--', alpha=0.7)

# Add a background color to the plot area
plt.gca().set_facecolor('#f5f5f5')

# Save and show the plot
plt.tight_layout()
plt.savefig('art_initiatives_plot.png', dpi=300)  # Save the plot as a high-resolution image
plt.show()

